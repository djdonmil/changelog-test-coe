//Structuring commit messages in Conventional Commits//
eg:  feat: add the charging option for cars

//Commit message with type, scope, and description://
fix(homepage): change title width of title

//Commit message with BREAKING CHANGE://
refactor(api): remove the get api from reservations

BREAKING CHANGE: refactor to use the trip api instead of reservations api


*******************************************
npm init -y

git init

**//Add standard-version to our project//**

npm install --save-dev standard-version

//we also need to add in package.json:

"scripts": {
  "release": "standard-version"
}

//add changes in file using git add and add this type of commit message in coventional way:
git commit -m "feat(new-feature): add a new-feature to our project"

//and then create 1st release using:
npm run release

//this does the following:
The message above does the following:

- Increases the SemVer version number from 1.0.0 to 1.1.0 We added one feature, therefore, MINOR was updated from 0 to 1
- Creates a CHANGELOG.md file, adding the required content to it
- Commits the changes above, creating a v1.1.0 tag
- Prints out a message to push tags and publish our package to npm, if needed

*********************************************
Adding Commitizen:
*********************************************
Instead of writing conventional commits yourself, you can use Commitizen to auto-generate them. 
Commitizen asks you questions in the command prompt and generates the commits based on your answers.

npm install --save-dev commitizen

//Now, initialize Commitizen to use the conventional changelog adapter
//(An adapter is a configuration that tells Commitizen to display different kinds of commits in a prompt. ):

npx commitizen init cz-conventional-changelog --save-dev --save-exact

//Now, to use Commitizen, weâ€™ll add an npm script:
"scripts": {
    "commit": "cz"
}

//make sure you create .gitignore and ignore nod modules
//add changes in file and hit below command to make new commit:

npm run commit


